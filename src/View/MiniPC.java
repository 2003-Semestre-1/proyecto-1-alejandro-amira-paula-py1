/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Controller.MiniPCController;
import Model.BCP;
import Model.CPU;
import Model.FileManager;
import Model.Memory;
import Model.SecondaryMemory;
import Model.MemoryRegister;
import Model.StatsSet;
import View.ConfigMemoria;
import java.io.File;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Optional;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.JTextPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author aleja
 */
public class MiniPC extends javax.swing.JFrame {
    // Esta clase representa la GUI del programa que se utiliza para cargar los archivos, leer las instrucciones y ver la informaci칩n de la memoria y los registros
    // Contiene el controlador del CPU, el administrador de archivos, la cantidad de filas de instrucciones que se han generado y la direcci칩n actual que se desplegar치 en la GUI
    
    public MiniPCController controller = new MiniPCController();
    public MiniPCController controller2 = new MiniPCController();
    public FileManager fileManager = new FileManager();
    public SecondaryMemory secondaryMemory = new SecondaryMemory(512,64);
    int currentInstructionDisplay = 0;
    boolean waitingForInput = false;
    boolean archivoAbierto = false;
    boolean jumpFlag = false;
    boolean isAutomatic = false;
    int timeDifference = 0;
    int countTimeTable = 0;
    int jumpToAddress = 0;
    
    /**
     * Creates new form NewJFrame
     */
    public MiniPC() {
        CPU cpu = new CPU("CPU #0");
        Memory memory = new Memory(256);
        cpu.setMemory(memory);
        
        CPU cpu2 = new CPU("CPU #1");
        Memory memory2 = new Memory(256);
        cpu2.setMemory(memory);
        
        this.getController().setCpu(cpu);
        this.getController2().setCpu(cpu2);

        initComponents();
        
        this.getTblMemoryList().setValueAt("Memoria Principal", 0, 0);
        this.getTblMemoryList().setValueAt(this.getController().getCpu().getMemory().getSize(), 0, 1);
        this.getTblMemoryList().setValueAt("Memoria Secundaria", 1, 0);
        this.getTblMemoryList().setValueAt(this.getSecondaryMemory().getSize(), 1, 1);
        this.getTblMemoryList().setValueAt("Memoria Virtual", 2, 0);
        this.getTblMemoryList().setValueAt(this.getSecondaryMemory().getVirtualMemorySize(), 2, 1);
        
        this.updateMemory(this.getController().getCpu().getMemory().getSize(), this.getSecondaryMemory().getSize(), this.getSecondaryMemory().getVirtualMemorySize());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nextInstructionBtn1 = new javax.swing.JButton();
        label1 = new java.awt.Label();
        jPanel3 = new javax.swing.JPanel();
        Pnl_Registros = new javax.swing.JPanel();
        lblAX = new javax.swing.JLabel();
        lblNumberAX = new javax.swing.JLabel();
        lblPC = new javax.swing.JLabel();
        lblNumberPC = new javax.swing.JLabel();
        lblBX = new javax.swing.JLabel();
        lblNumberBX = new javax.swing.JLabel();
        lblAC = new javax.swing.JLabel();
        lblNumberAC = new javax.swing.JLabel();
        lblCX = new javax.swing.JLabel();
        lblNumberCX = new javax.swing.JLabel();
        lblDX = new javax.swing.JLabel();
        lblNumberDX = new javax.swing.JLabel();
        lblIR = new javax.swing.JLabel();
        lblNumberIR = new javax.swing.JLabel();
        lblAL = new javax.swing.JLabel();
        lblNumberAL = new javax.swing.JLabel();
        lblAH = new javax.swing.JLabel();
        lblNumberAH = new javax.swing.JLabel();
        Pnl_Memoria = new javax.swing.JScrollPane();
        tblProcesses = new javax.swing.JTable();
        Pnl_Menu = new javax.swing.JPanel();
        loadFileBtn = new javax.swing.JButton();
        cleanTableBtn = new javax.swing.JButton();
        exitBtn = new javax.swing.JButton();
        lblTeclado = new javax.swing.JLabel();
        nextInstructionBtn = new javax.swing.JButton();
        tecladoTxtField = new javax.swing.JTextField();
        lblPantalla = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        pantalla = new javax.swing.JTextPane();
        automaticBtn = new javax.swing.JButton();
        estadisticasBtn = new javax.swing.JButton();
        configurarMemoriaBtn = new javax.swing.JButton();
        Lbl_memoria = new javax.swing.JLabel();
        Lbl_registros = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        Lbl_registros1 = new javax.swing.JLabel();
        Pnl_Registros1 = new javax.swing.JPanel();
        lblAX1 = new javax.swing.JLabel();
        lblNumberAX2 = new javax.swing.JLabel();
        lblPC1 = new javax.swing.JLabel();
        lblNumberPC2 = new javax.swing.JLabel();
        lblBX1 = new javax.swing.JLabel();
        lblNumberBX2 = new javax.swing.JLabel();
        lblAC1 = new javax.swing.JLabel();
        lblNumberAC2 = new javax.swing.JLabel();
        lblCX1 = new javax.swing.JLabel();
        lblNumberCX2 = new javax.swing.JLabel();
        lblDX1 = new javax.swing.JLabel();
        lblNumberDX2 = new javax.swing.JLabel();
        lblIR1 = new javax.swing.JLabel();
        lblNumberIR2 = new javax.swing.JLabel();
        lblAL1 = new javax.swing.JLabel();
        lblNumberAL2 = new javax.swing.JLabel();
        lblAH1 = new javax.swing.JLabel();
        lblNumberAH2 = new javax.swing.JLabel();
        Lbl_memoria2 = new javax.swing.JLabel();
        Pnl_Memoria1 = new javax.swing.JScrollPane();
        tblMemory2 = new javax.swing.JTable();
        Pnl_Memoria2 = new javax.swing.JScrollPane();
        tblMemory = new javax.swing.JTable();
        lblListaProcesos = new javax.swing.JLabel();
        Pnl_Memoria4 = new javax.swing.JScrollPane();
        tblMemoryList = new javax.swing.JTable();
        Lbl_memoria4 = new javax.swing.JLabel();
        Lbl_memoria5 = new javax.swing.JLabel();
        Lbl_memoria6 = new javax.swing.JLabel();
        Lbl_memoria7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblSecondaryMemory = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblVirtualMemory = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblMainMemory = new javax.swing.JTable();

        nextInstructionBtn1.setText("Siguiente instrucci칩n");
        nextInstructionBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextInstructionBtn1ActionPerformed(evt);
            }
        });

        label1.setText("label1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MiniPC");

        jPanel3.setBackground(new java.awt.Color(255, 255, 204));
        jPanel3.setPreferredSize(new java.awt.Dimension(650, 450));
        jPanel3.setRequestFocusEnabled(false);
        jPanel3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jPanel3FocusLost(evt);
            }
        });

        Pnl_Registros.setBackground(new java.awt.Color(204, 204, 255));

        lblAX.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblAX.setText("AX:");

        lblNumberAX.setText("0");

        lblPC.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblPC.setText("PC: ");

        lblNumberPC.setText("0");

        lblBX.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblBX.setText("BX:");

        lblNumberBX.setText("0");

        lblAC.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblAC.setText("AC:");

        lblNumberAC.setText("0");

        lblCX.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblCX.setText("CX:");

        lblNumberCX.setText("0");

        lblDX.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblDX.setText("DX: ");

        lblNumberDX.setText("0");

        lblIR.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblIR.setText("IR:");

        lblNumberIR.setText(" ");

        lblAL.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblAL.setText("AL:");

        lblNumberAL.setText("0");

        lblAH.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblAH.setText("AH:");

        lblNumberAH.setText("0");

        javax.swing.GroupLayout Pnl_RegistrosLayout = new javax.swing.GroupLayout(Pnl_Registros);
        Pnl_Registros.setLayout(Pnl_RegistrosLayout);
        Pnl_RegistrosLayout.setHorizontalGroup(
            Pnl_RegistrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Pnl_RegistrosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Pnl_RegistrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Pnl_RegistrosLayout.createSequentialGroup()
                        .addComponent(lblAL)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblNumberAL, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(Pnl_RegistrosLayout.createSequentialGroup()
                        .addGroup(Pnl_RegistrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(Pnl_RegistrosLayout.createSequentialGroup()
                                .addComponent(lblAX)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblNumberAX))
                            .addGroup(Pnl_RegistrosLayout.createSequentialGroup()
                                .addComponent(lblPC)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblNumberPC)))
                        .addGap(87, 87, 87)
                        .addGroup(Pnl_RegistrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(Pnl_RegistrosLayout.createSequentialGroup()
                                .addGroup(Pnl_RegistrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblAC)
                                    .addComponent(lblBX))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(Pnl_RegistrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblNumberBX)
                                    .addComponent(lblNumberAC))
                                .addGap(35, 35, 35))
                            .addGroup(Pnl_RegistrosLayout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(lblAH)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblNumberAH, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(Pnl_RegistrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(Pnl_RegistrosLayout.createSequentialGroup()
                                .addComponent(lblDX)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblNumberDX)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(Pnl_RegistrosLayout.createSequentialGroup()
                                .addComponent(lblCX)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblNumberCX)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(Pnl_RegistrosLayout.createSequentialGroup()
                                .addComponent(lblIR)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblNumberIR, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(12, Short.MAX_VALUE))))))
        );
        Pnl_RegistrosLayout.setVerticalGroup(
            Pnl_RegistrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Pnl_RegistrosLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(Pnl_RegistrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAX)
                    .addComponent(lblNumberAX)
                    .addComponent(lblBX)
                    .addComponent(lblNumberBX)
                    .addComponent(lblCX)
                    .addComponent(lblNumberCX))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(Pnl_RegistrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPC)
                    .addComponent(lblNumberPC)
                    .addComponent(lblAC)
                    .addComponent(lblNumberAC)
                    .addComponent(lblIR)
                    .addComponent(lblNumberIR))
                .addGap(7, 7, 7)
                .addGroup(Pnl_RegistrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Pnl_RegistrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblAH)
                        .addComponent(lblNumberAH)
                        .addComponent(lblDX)
                        .addComponent(lblNumberDX))
                    .addGroup(Pnl_RegistrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblAL)
                        .addComponent(lblNumberAL)))
                .addContainerGap())
        );

        Pnl_Memoria.setBackground(new java.awt.Color(204, 204, 255));
        Pnl_Memoria.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Pnl_Memoria.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        Pnl_Memoria.setMaximumSize(new java.awt.Dimension(102, 102));
        Pnl_Memoria.setMinimumSize(new java.awt.Dimension(101, 101));
        Pnl_Memoria.setName(""); // NOI18N

        tblProcesses.setBackground(new java.awt.Color(204, 204, 255));
        tblProcesses.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "N칰mero", "Nombre", "Estado", "CPU"
            }
        ));
        tblProcesses.setRowHeight(30);
        Pnl_Memoria.setViewportView(tblProcesses);

        Pnl_Menu.setBackground(new java.awt.Color(204, 204, 255));
        Pnl_Menu.setPreferredSize(new java.awt.Dimension(602, 602));

        loadFileBtn.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        loadFileBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/archivo.png"))); // NOI18N
        loadFileBtn.setText("Cargar Archivo");
        loadFileBtn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        loadFileBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadFileBtnActionPerformed(evt);
            }
        });

        cleanTableBtn.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        cleanTableBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/reiniciar.png"))); // NOI18N
        cleanTableBtn.setText("Limpiar");
        cleanTableBtn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        cleanTableBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cleanTableBtnActionPerformed(evt);
            }
        });

        exitBtn.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        exitBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/salir.png"))); // NOI18N
        exitBtn.setText("Salir");
        exitBtn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        exitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitBtnActionPerformed(evt);
            }
        });

        lblTeclado.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblTeclado.setText("Teclado");

        nextInstructionBtn.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        nextInstructionBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/siguiente.png"))); // NOI18N
        nextInstructionBtn.setText("Siguiente");
        nextInstructionBtn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        nextInstructionBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextInstructionBtnActionPerformed(evt);
            }
        });

        tecladoTxtField.setEditable(false);
        tecladoTxtField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tecladoTxtFieldActionPerformed(evt);
            }
        });

        lblPantalla.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblPantalla.setText("Pantalla");

        jScrollPane1.setViewportView(pantalla);

        automaticBtn.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        automaticBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/automatic.png"))); // NOI18N
        automaticBtn.setText("Autom치tico");
        automaticBtn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        automaticBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                automaticBtnActionPerformed(evt);
            }
        });

        estadisticasBtn.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        estadisticasBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/estadisitica.png"))); // NOI18N
        estadisticasBtn.setText("Estad칤sticas");
        estadisticasBtn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        estadisticasBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                estadisticasBtnActionPerformed(evt);
            }
        });

        configurarMemoriaBtn.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        configurarMemoriaBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/configuraciones.png"))); // NOI18N
        configurarMemoriaBtn.setText("Configurar memoria");
        configurarMemoriaBtn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        configurarMemoriaBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                configurarMemoriaBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Pnl_MenuLayout = new javax.swing.GroupLayout(Pnl_Menu);
        Pnl_Menu.setLayout(Pnl_MenuLayout);
        Pnl_MenuLayout.setHorizontalGroup(
            Pnl_MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Pnl_MenuLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(lblPantalla)
                .addGap(38, 38, 38))
            .addGroup(Pnl_MenuLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Pnl_MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(exitBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(nextInstructionBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(loadFileBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(automaticBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tecladoTxtField)
                    .addComponent(cleanTableBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(estadisticasBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(configurarMemoriaBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Pnl_MenuLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblTeclado)
                .addGap(39, 39, 39))
        );
        Pnl_MenuLayout.setVerticalGroup(
            Pnl_MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Pnl_MenuLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblPantalla)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblTeclado)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tecladoTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addComponent(loadFileBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nextInstructionBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(automaticBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cleanTableBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(configurarMemoriaBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(estadisticasBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(exitBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        Lbl_memoria.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        Lbl_memoria.setText("CPU #0");
        Lbl_memoria.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        Lbl_registros.setBackground(new java.awt.Color(255, 255, 255));
        Lbl_registros.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        Lbl_registros.setText("BCP CPU #0");
        Lbl_registros.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel4.setText("Mini PC");

        Lbl_registros1.setBackground(new java.awt.Color(255, 255, 255));
        Lbl_registros1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        Lbl_registros1.setText("BCP CPU #1");
        Lbl_registros1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        Pnl_Registros1.setBackground(new java.awt.Color(204, 204, 255));

        lblAX1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblAX1.setText("AX:");

        lblNumberAX2.setText("0");

        lblPC1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblPC1.setText("PC: ");

        lblNumberPC2.setText("0");

        lblBX1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblBX1.setText("BX:");

        lblNumberBX2.setText("0");

        lblAC1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblAC1.setText("AC:");

        lblNumberAC2.setText("0");

        lblCX1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblCX1.setText("CX:");

        lblNumberCX2.setText("0");

        lblDX1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblDX1.setText("DX: ");

        lblNumberDX2.setText("0");

        lblIR1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblIR1.setText("IR:");

        lblNumberIR2.setText(" ");

        lblAL1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblAL1.setText("AL:");

        lblNumberAL2.setText("0");

        lblAH1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblAH1.setText("AH:");

        lblNumberAH2.setText("0");

        javax.swing.GroupLayout Pnl_Registros1Layout = new javax.swing.GroupLayout(Pnl_Registros1);
        Pnl_Registros1.setLayout(Pnl_Registros1Layout);
        Pnl_Registros1Layout.setHorizontalGroup(
            Pnl_Registros1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Pnl_Registros1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Pnl_Registros1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Pnl_Registros1Layout.createSequentialGroup()
                        .addComponent(lblAL1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblNumberAL2, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(Pnl_Registros1Layout.createSequentialGroup()
                        .addGroup(Pnl_Registros1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(Pnl_Registros1Layout.createSequentialGroup()
                                .addComponent(lblAX1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblNumberAX2))
                            .addGroup(Pnl_Registros1Layout.createSequentialGroup()
                                .addComponent(lblPC1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblNumberPC2)))
                        .addGap(87, 87, 87)
                        .addGroup(Pnl_Registros1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(Pnl_Registros1Layout.createSequentialGroup()
                                .addGroup(Pnl_Registros1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblAC1)
                                    .addComponent(lblBX1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(Pnl_Registros1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblNumberBX2)
                                    .addComponent(lblNumberAC2))
                                .addGap(35, 35, 35))
                            .addGroup(Pnl_Registros1Layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(lblAH1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblNumberAH2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(Pnl_Registros1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(Pnl_Registros1Layout.createSequentialGroup()
                                .addComponent(lblDX1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblNumberDX2)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(Pnl_Registros1Layout.createSequentialGroup()
                                .addComponent(lblCX1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblNumberCX2)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(Pnl_Registros1Layout.createSequentialGroup()
                                .addComponent(lblIR1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblNumberIR2, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(12, Short.MAX_VALUE))))))
        );
        Pnl_Registros1Layout.setVerticalGroup(
            Pnl_Registros1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Pnl_Registros1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(Pnl_Registros1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAX1)
                    .addComponent(lblNumberAX2)
                    .addComponent(lblBX1)
                    .addComponent(lblNumberBX2)
                    .addComponent(lblCX1)
                    .addComponent(lblNumberCX2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(Pnl_Registros1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPC1)
                    .addComponent(lblNumberPC2)
                    .addComponent(lblAC1)
                    .addComponent(lblNumberAC2)
                    .addComponent(lblIR1)
                    .addComponent(lblNumberIR2))
                .addGap(7, 7, 7)
                .addGroup(Pnl_Registros1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Pnl_Registros1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblAH1)
                        .addComponent(lblNumberAH2)
                        .addComponent(lblDX1)
                        .addComponent(lblNumberDX2))
                    .addGroup(Pnl_Registros1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblAL1)
                        .addComponent(lblNumberAL2)))
                .addContainerGap())
        );

        Lbl_memoria2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        Lbl_memoria2.setText("CPU #1");
        Lbl_memoria2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        Pnl_Memoria1.setBackground(new java.awt.Color(204, 204, 255));
        Pnl_Memoria1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Pnl_Memoria1.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        Pnl_Memoria1.setMaximumSize(new java.awt.Dimension(102, 102));
        Pnl_Memoria1.setMinimumSize(new java.awt.Dimension(101, 101));
        Pnl_Memoria1.setName(""); // NOI18N

        tblMemory2.setBackground(new java.awt.Color(204, 204, 255));
        tblMemory2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "C칩digo ASM", "ID Proceso", "Proceso", "Tiempo"
            }
        ));
        tblMemory2.setRowHeight(30);
        Pnl_Memoria1.setViewportView(tblMemory2);

        Pnl_Memoria2.setBackground(new java.awt.Color(204, 204, 255));
        Pnl_Memoria2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Pnl_Memoria2.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        Pnl_Memoria2.setMaximumSize(new java.awt.Dimension(102, 102));
        Pnl_Memoria2.setMinimumSize(new java.awt.Dimension(101, 101));
        Pnl_Memoria2.setName(""); // NOI18N

        tblMemory.setBackground(new java.awt.Color(204, 204, 255));
        tblMemory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "C칩digo ASM", "ID Proceso", "Proceso", "Tiempo"
            }
        ));
        tblMemory.setRowHeight(30);
        Pnl_Memoria2.setViewportView(tblMemory);

        lblListaProcesos.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        lblListaProcesos.setText("Lista de procesos");
        lblListaProcesos.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        Pnl_Memoria4.setBackground(new java.awt.Color(204, 204, 255));
        Pnl_Memoria4.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Pnl_Memoria4.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        Pnl_Memoria4.setMaximumSize(new java.awt.Dimension(102, 102));
        Pnl_Memoria4.setMinimumSize(new java.awt.Dimension(101, 101));
        Pnl_Memoria4.setName(""); // NOI18N

        tblMemoryList.setBackground(new java.awt.Color(204, 204, 255));
        tblMemoryList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Memoria", "Size"
            }
        ));
        tblMemoryList.setRowHeight(30);
        Pnl_Memoria4.setViewportView(tblMemoryList);

        Lbl_memoria4.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        Lbl_memoria4.setText("Lista de memorias");
        Lbl_memoria4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        Lbl_memoria5.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        Lbl_memoria5.setText("Memoria principal");
        Lbl_memoria5.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        Lbl_memoria6.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        Lbl_memoria6.setText("Memoria secundaria");
        Lbl_memoria6.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        Lbl_memoria7.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        Lbl_memoria7.setText("Memoria virtual");
        Lbl_memoria7.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        tblSecondaryMemory.setBackground(new java.awt.Color(204, 204, 255));
        tblSecondaryMemory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Posici칩n", "Valor en memoria", "Instrucci칩n ASM"
            }
        ));
        tblSecondaryMemory.setRowHeight(30);
        jScrollPane2.setViewportView(tblSecondaryMemory);

        tblVirtualMemory.setBackground(new java.awt.Color(204, 204, 255));
        tblVirtualMemory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Posici칩n", "Valor en memoria", "Instrucci칩n ASM"
            }
        ));
        tblVirtualMemory.setRowHeight(30);
        jScrollPane3.setViewportView(tblVirtualMemory);

        tblMainMemory.setBackground(new java.awt.Color(204, 204, 255));
        tblMainMemory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Posici칩n", "Valor en memoria", "Instrucci칩n ASM"
            }
        ));
        tblMainMemory.setRowHeight(30);
        jScrollPane4.setViewportView(tblMainMemory);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(316, 316, 316)
                .addComponent(Lbl_registros)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Pnl_Registros1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(144, 144, 144)
                        .addComponent(Lbl_memoria2))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(139, 139, 139)
                        .addComponent(Lbl_registros1))
                    .addComponent(Pnl_Memoria1, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Lbl_memoria6)
                .addGap(247, 247, 247)
                .addComponent(Lbl_memoria7)
                .addGap(111, 111, 111))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Pnl_Menu, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Lbl_memoria5)
                        .addGap(133, 133, 133))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(165, 165, 165)
                                .addComponent(Lbl_memoria))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(Pnl_Memoria2, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(Pnl_Registros, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(Pnl_Memoria, javax.swing.GroupLayout.PREFERRED_SIZE, 451, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addContainerGap())))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(Pnl_Memoria4, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(88, 88, 88)
                                .addComponent(Lbl_memoria4)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(350, 350, 350)
                        .addComponent(lblListaProcesos))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(605, 605, 605)
                        .addComponent(jLabel4)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(Lbl_registros)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Pnl_Menu, javax.swing.GroupLayout.PREFERRED_SIZE, 455, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(Pnl_Registros, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(Lbl_memoria)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Pnl_Memoria2, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblListaProcesos)
                                    .addComponent(Lbl_memoria5))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Pnl_Memoria, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(Lbl_registros1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Pnl_Registros1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Lbl_memoria2)
                        .addGap(4, 4, 4)
                        .addComponent(Pnl_Memoria1, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Lbl_memoria6)
                    .addComponent(Lbl_memoria7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(Lbl_memoria4)
                        .addGap(11, 11, 11)
                        .addComponent(Pnl_Memoria4, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 1037, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 859, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public int getTimeDifference() {
        return timeDifference;
    }

    public void setTimeDifference(int timeDifference) {
        this.timeDifference = timeDifference;
    }
    
    private void cleanMemory(){
        JTable mainMemoryTable = this.getTblMainMemory();
        JTable secondaryMemoryTable = this.getTblSecondaryMemory();
        JTable virtualMemoryTable = this.getTblVirtualMemory();
        
        DefaultTableModel mainMemoryModel = (DefaultTableModel) mainMemoryTable.getModel();
        DefaultTableModel secondaryMemoryModel = (DefaultTableModel) secondaryMemoryTable.getModel();
        DefaultTableModel virtualMemoryModel = (DefaultTableModel) virtualMemoryTable.getModel();
        
        while (mainMemoryModel.getRowCount() > 0) {
            mainMemoryModel.removeRow(0);
        }
        
        while (secondaryMemoryModel.getRowCount() > 0) {
            secondaryMemoryModel.removeRow(0);
        }
        
        while (virtualMemoryModel.getRowCount() > 0) {
            virtualMemoryModel.removeRow(0);
        }
        
    }
    
    private void updateMemory(int mainMemorySize, int secondaryMemorySize, int virtualMemorySize){
        JTable mainMemoryTable = this.getTblMainMemory();
        JTable secondaryMemoryTable = this.getTblSecondaryMemory();
        JTable virtualMemoryTable = this.getTblVirtualMemory();
        
        DefaultTableModel mainMemoryModel = (DefaultTableModel) mainMemoryTable.getModel();
        DefaultTableModel secondaryMemoryModel = (DefaultTableModel) secondaryMemoryTable.getModel();
        DefaultTableModel virtualMemoryModel = (DefaultTableModel) virtualMemoryTable.getModel();
        
        this.cleanMemory();
        
        for (int i = 0; i < mainMemorySize; i++) {
            if (this.controller.getCpu().getMemory().getMemoryRegisters().get(i).isPresent()){
                MemoryRegister currentInstruction = this.controller.getCpu().getMemory().getMemoryRegisters().get(i).get();
                mainMemoryModel.addRow(new Object[] { i , currentInstruction.convertToBinary(), currentInstruction.getAsmInstructionString() });
            }
            else
                mainMemoryModel.addRow(new Object[] { i , 0, " " });
            }
        
        for (int i = 0; i < secondaryMemorySize; i++) {
            if (this.getSecondaryMemory().getMemoryRegisters().get(i).isPresent()){
                MemoryRegister currentInstruction = this.getSecondaryMemory().getMemoryRegisters().get(i).get();
                secondaryMemoryModel.addRow(new Object[] { i , currentInstruction.convertToBinary(), currentInstruction.getAsmInstructionString() });
            }
            else
                secondaryMemoryModel.addRow(new Object[] { i , 0, " " });
            }
        
        for (int i = 0; i < virtualMemorySize; i++) {
            if (this.getSecondaryMemory().getVirtualMemory().get(i).isPresent()){
                MemoryRegister currentInstruction = this.getSecondaryMemory().getVirtualMemory().get(i).get();
                virtualMemoryModel.addRow(new Object[] { i , currentInstruction.convertToBinary(), currentInstruction.getAsmInstructionString() });
            }
            else
                virtualMemoryModel.addRow(new Object[] { i , 0, " " });
        }
    }
    
    private void cleanTable(){
        // Este m칠todo limpia toda la tabla de instrucciones por medio de resetear todos los valores que est치n siendo actualmente desplegados
        // Tambi칠n resetea el controlador de CPU actual y el administrador de archivos actual
        // No recibe ning칰n par치metro
        
        for (int i = 0; i < this.getTblMemory().getRowCount(); i++) {
                this.getTblMemory().setValueAt("", i, 0);
                this.getTblMemory().setValueAt("", i, 1);
                this.getTblMemory().setValueAt("", i, 2);
                this.getTblMemory().setValueAt("", i, 3);
        }
        this.getLblNumberAC().setText("0");
        this.getLblNumberPC().setText("0");
        this.getLblNumberIR().setText(" ");
        this.getLblNumberAX().setText("0");
        this.getLblNumberBX().setText("0");
        this.getLblNumberCX().setText("0");
        this.getLblNumberDX().setText("0");
        this.getLblNumberAL().setText("0");
        this.getLblNumberAH().setText("0");
        
        for (int i = 0; i < this.getTblMemory2().getRowCount(); i++) {
                this.getTblMemory2().setValueAt("", i, 0);
                this.getTblMemory2().setValueAt("", i, 1);
                this.getTblMemory2().setValueAt("", i, 2);
                this.getTblMemory2().setValueAt("", i, 3);
        }
        this.getLblNumberAC2().setText("0");
        this.getLblNumberPC2().setText("0");
        this.getLblNumberIR2().setText(" ");
        this.getLblNumberAX2().setText("0");
        this.getLblNumberBX2().setText("0");
        this.getLblNumberCX2().setText("0");
        this.getLblNumberDX2().setText("0");
        this.getLblNumberAL2().setText("0");
        this.getLblNumberAH2().setText("0");
        
        DefaultTableModel model = (DefaultTableModel) this.getTblProcesses().getModel();
        for (int row = 0; row < model.getRowCount(); row++) {
            for (int col = 0; col < model.getColumnCount(); col++) {
                model.setValueAt("", row, col);
            }
        }
        
        FileManager newFileManager = new FileManager();
        this.setFileManager(newFileManager);
        
        MiniPCController controller = new MiniPCController();
        MiniPCController controller2 = new MiniPCController();
        this.setController(controller);
        this.setController2(controller2);
        
        CPU cpu = new CPU("CPU #0");
        Memory memory = new Memory(256);
        cpu.setMemory(memory);
        
        CPU cpu2 = new CPU("CPU #1");
        Memory memory2 = new Memory(256);
        cpu2.setMemory(memory);
        
        SecondaryMemory secondaryMemory = new SecondaryMemory(512,64);
        this.setSecondaryMemory(secondaryMemory);
        
        this.getController().setCpu(cpu);
        this.getController2().setCpu(cpu2);
    }

    public JTable getTblVirtualMemory() {
        return tblVirtualMemory;
    }

    public void setTblVirtualMemory(JTable tblVirtualMemory) {
        this.tblVirtualMemory = tblVirtualMemory;
    }

    
    
    public SecondaryMemory getSecondaryMemory() {
        return secondaryMemory;
    }

    public void setSecondaryMemory(SecondaryMemory secondaryMemory) {
        this.secondaryMemory = secondaryMemory;
    }

    public boolean isIsAutomatic() {
        return isAutomatic;
    }

    public void setIsAutomatic(boolean isAutomatic) {
        this.isAutomatic = isAutomatic;
    }

    public JButton getNextInstructionBtn1() {
        return nextInstructionBtn1;
    }

    public void setNextInstructionBtn1(JButton nextInstructionBtn1) {
        this.nextInstructionBtn1 = nextInstructionBtn1;
    }

    public JTable getTblMainMemory() {
        return tblMainMemory;
    }

    public void setTblMainMemory(JTable tblMainMemory) {
        this.tblMainMemory = tblMainMemory;
    }

    public JTable getTblSecondaryMemory() {
        return tblSecondaryMemory;
    }

    public void setTblSecondaryMemory(JTable tblSecondaryMemory) {
        this.tblSecondaryMemory = tblSecondaryMemory;
    }
    
    

    public boolean isJumpFlag() {
        return jumpFlag;
    }

    public void setJumpFlag(boolean jumpFlag) {
        this.jumpFlag = jumpFlag;
    }

    public int getJumpToAddress() {
        return jumpToAddress;
    }

    public void setJumpToAddress(int jumpToAddress) {
        this.jumpToAddress = jumpToAddress;
    }

    public int getCountTimeTable() {
        return countTimeTable;
    }

    public void setCountTimeTable(int countTimeTable) {
        this.countTimeTable = countTimeTable;
    }
    
    
    
    public boolean isWaitingForInput() {
        return waitingForInput;
    }

    public void setWaitingForInput(boolean waitingForInput) {
        this.waitingForInput = waitingForInput;
    }

    public boolean isArchivoAbierto() {
        return archivoAbierto;
    }

    public void setArchivoAbierto(boolean archivoAbierto) {
        this.archivoAbierto = archivoAbierto;
    }

    public MiniPCController getController2() {
        return controller2;
    }

    public void setController2(MiniPCController controller2) {
        this.controller2 = controller2;
    }

    public int getCurrentInstructionDisplay() {
        return currentInstructionDisplay;
    }

    public void setCurrentInstructionDisplay(int currentInstructionDisplay) {
        this.currentInstructionDisplay = currentInstructionDisplay;
    }
    
    
    
    public void updateTable(ArrayList<MemoryRegister> instructionSet,ArrayList<MemoryRegister> instructionSet2, int row, int currentDisplayInstruction) {
        // Este m칠todo actualiza la tabla visualmente, es decir actualiza la informaci칩n que est치 siendo desplegada en la GUI
        // Va mostrando paso a paso las instrucciones cargadas en memoria y toda la informaci칩n relevante a estas
        // Recibe como par치metros el set de instrucciones y el valor entero de la fila donde se desplegar치 la instrucci칩n
        //cpu 1
        
        String asmString1 = "";
        String asmString2 = "";
        System.out.println("Diff: "+this.getTimeDifference());
        if (instructionSet.size()>0){
            
            if (this.getTimeDifference()>1){
                this.setCurrentInstructionDisplay(this.getCurrentInstructionDisplay()-1);
            }
            asmString1 = instructionSet.get(currentDisplayInstruction).getAsmInstructionString();
            
            if (this.getController().getCpu().isProgramaTerminado()){
                this.setCurrentInstructionDisplay(this.getFileManager().getInstructions().size()-1);
                this.getController().getCpu().setProgramaTerminado(false);
            }
            
        }
        if (instructionSet2.size()>0){
            
            if (this.getTimeDifference()>1){
                this.setCurrentInstructionDisplay(this.getCurrentInstructionDisplay()-1);
            }
            asmString2 = instructionSet2.get(currentDisplayInstruction).getAsmInstructionString();
            
            if (this.getController2().getCpu().isProgramaTerminado()){
                this.setCurrentInstructionDisplay(this.getFileManager().getInstructions2().size()-1);
                this.getController2().getCpu().setProgramaTerminado(false);
            }
        }
        if (this.getTimeDifference()>0)
            this.setTimeDifference(this.getTimeDifference()-1);
        String processID = "";
        String processName = "";
        String processState = "";
        for(int i = 0 ; i < this.getController().getCpu().getMemory().getBcpList().size() ; i ++){
            if (this.getController().getCpu().getMemory().getBcpList().get(i).getCpuName().equalsIgnoreCase("CPU #0")){
                processState = this.getController().getCpu().getMemory().getBcpList().get(i).getEstadoActual();
                processID = this.getController().getCpu().getMemory().getBcpList().get(i).getIdProcess()+"";
                String path = this.getController().getCpu().getMemory().getBcpList().get(i).getNameProcess();
                File file = new File(path);
                processName = file.getName();
            }
            
        }
        
        this.getTblMemory().setValueAt(asmString1, this.getController().getCpu().getNumberExecutedInstructions(), 0);
        this.getTblMemory().setValueAt(processID, this.getController().getCpu().getNumberExecutedInstructions(), 1);
        this.getTblMemory().setValueAt(processName, this.getController().getCpu().getNumberExecutedInstructions(), 2);
        this.getTblMemory().setValueAt(this.getCountTimeTable(), this.getController().getCpu().getNumberExecutedInstructions(), 3);
        
        this.getLblNumberAX().setText(this.getController().getCpu().getDataRegisters().get(0).getValue()+"");
        this.getLblNumberBX().setText(this.getController().getCpu().getDataRegisters().get(1).getValue()+"");
        this.getLblNumberCX().setText(this.getController().getCpu().getDataRegisters().get(2).getValue()+"");
        this.getLblNumberDX().setText(this.getController().getCpu().getDataRegisters().get(3).getValue()+"");
        this.getLblNumberAL().setText(this.getController().getCpu().getDataRegisters().get(1).getLowByteValue()+"");
        this.getLblNumberAH().setText(this.getController().getCpu().getDataRegisters().get(1).getHighByteValue()+"");
        
        this.getLblNumberAC().setText(this.getController().getCpu().getAccumulator()+"");
        if (this.getFileManager().getInstructions().size() > this.getController().getRowCount()+1){
            this.getLblNumberPC().setText(""+(this.getController().getCpu().getProgramCounter()));
            this.getLblNumberIR().setText(this.getFileManager().getInstructions().get(this.getController().getRowCount()).getAsmInstructionString());
        }
        else{
            this.getController().getCpu().setProgramCounter(Integer.parseInt(this.getLblNumberPC().getText()));
        }
        //
        
        //cpu 2
        processID = "";
        processName = "";
        processState = "";
        for(int i = 0 ; i < this.getController().getCpu().getMemory().getBcpList().size() ; i ++){
            if (this.getController().getCpu().getMemory().getBcpList().get(i).getCpuName().equalsIgnoreCase("CPU #1")){
                processID = this.getController().getCpu().getMemory().getBcpList().get(i).getIdProcess()+"";
                String path = this.getController().getCpu().getMemory().getBcpList().get(i).getNameProcess();
                File file = new File(path);
                processName = file.getName();
            }
            
        }
        
        this.getTblMemory2().setValueAt(asmString2, this.getController2().getCpu().getNumberExecutedInstructions(), 0);
        
        this.getTblMemory2().setValueAt(processID, this.getController2().getCpu().getNumberExecutedInstructions(), 1);
        this.getTblMemory2().setValueAt(processName, this.getController2().getCpu().getNumberExecutedInstructions(), 2);
        this.getTblMemory2().setValueAt(this.getCountTimeTable(), this.getController2().getCpu().getNumberExecutedInstructions(), 3);
        
        this.getLblNumberAX2().setText(this.getController2().getCpu().getDataRegisters().get(0).getValue()+"");
        this.getLblNumberBX2().setText(this.getController2().getCpu().getDataRegisters().get(1).getValue()+"");
        this.getLblNumberCX2().setText(this.getController2().getCpu().getDataRegisters().get(2).getValue()+"");
        this.getLblNumberDX2().setText(this.getController2().getCpu().getDataRegisters().get(3).getValue()+"");
        this.getLblNumberAL2().setText(this.getController2().getCpu().getDataRegisters().get(1).getLowByteValue()+"");
        this.getLblNumberAH2().setText(this.getController2().getCpu().getDataRegisters().get(1).getHighByteValue()+"");
        
        this.getLblNumberAC2().setText(this.getController2().getCpu().getAccumulator()+"");
        if (this.getFileManager().getInstructions2().size() > this.getController().getRowCount()+1){
            this.getLblNumberPC2().setText(""+(this.getController2().getCpu().getProgramCounter()));
            this.getLblNumberIR2().setText(this.getFileManager().getInstructions2().get(this.getController2().getRowCount()).getAsmInstructionString());
        }
        else{
            this.getController2().getCpu().setProgramCounter(Integer.parseInt(this.getLblNumberPC2().getText()));
        }
        //
        
        this.setCountTimeTable(this.getCountTimeTable()+1);
        
        for(int i = 0 ; i < this.getController().getCpu().getMemory().getBcpList().size() ; i ++){
            this.getTblProcesses().setValueAt(this.getController().getCpu().getMemory().getBcpList().get(i).getIdProcess(), i, 0);
            
            String path = this.getController().getCpu().getMemory().getBcpList().get(i).getNameProcess();
            File file = new File(path);
            String fileName = file.getName();
            
            this.getTblProcesses().setValueAt(fileName, i, 1);
            this.getTblProcesses().setValueAt(this.getController().getCpu().getMemory().getBcpList().get(i).getEstadoActual(), i, 2);
            this.getTblProcesses().setValueAt(this.getController().getCpu().getMemory().getBcpList().get(i).getCpuName(), i, 3);
        }
        
        this.getController().setRowCount(this.getController().getRowCount()+1);
        this.getController().getCpu().setNumberExecutedInstructions(this.getController().getCpu().getNumberExecutedInstructions()+1);
        this.getController().getCpu().setCurrentAddress(this.getController().getCpu().getCurrentAddress()+1);
        
        this.getController2().setRowCount(this.getController2().getRowCount()+1);
        this.getController2().getCpu().setNumberExecutedInstructions(this.getController2().getCpu().getNumberExecutedInstructions()+1);
        this.getController2().getCpu().setCurrentAddress(this.getController2().getCpu().getCurrentAddress()+1);
        this.setCurrentInstructionDisplay(this.getCurrentInstructionDisplay()+1);
        
        this.getTblMemoryList().setValueAt("Memoria Principal", 0, 0);
        this.getTblMemoryList().setValueAt(this.getController().getCpu().getMemory().getSize(), 0, 1);
        this.getTblMemoryList().setValueAt("Memoria Secundaria", 1, 0);
        this.getTblMemoryList().setValueAt(this.getSecondaryMemory().getSize(), 1, 1);
        this.getTblMemoryList().setValueAt("Memoria Virtual", 2, 0);
        this.getTblMemoryList().setValueAt(this.getSecondaryMemory().getVirtualMemorySize(), 2, 1);
        
    } 

    public JTable getTblMemoryList() {
        return tblMemoryList;
    }

    public void setTblMemoryList(JTable tblMemoryList) {
        this.tblMemoryList = tblMemoryList;
    }
    
    public JTextPane getPantalla() {
        return pantalla;
    }

    public void setPantalla(JTextPane pantalla) {
        this.pantalla = pantalla;
    }

    public JTextField getTecladoTxtField() {
        return tecladoTxtField;
    }

    public void setTecladoTxtField(JTextField tecladoTxtField) {
        this.tecladoTxtField = tecladoTxtField;
    }
    
    

    public JLabel getLblNumberAH() {
        return lblNumberAH;
    }

    public void setLblNumberAH(JLabel lblNumberAH) {
        this.lblNumberAH = lblNumberAH;
    }

    public JLabel getLblNumberAL() {
        return lblNumberAL;
    }

    public void setLblNumberAL(JLabel lblNumberAL) {
        this.lblNumberAL = lblNumberAL;
    }
    
    

    public MiniPCController getController() {
        return controller;
    }

    public void setController(MiniPCController controller) {
        this.controller = controller;
    }

    public JLabel getLblNumberAC2() {
        return lblNumberAC2;
    }

    public void setLblNumberAC2(JLabel lblNumberAC2) {
        this.lblNumberAC2 = lblNumberAC2;
    }

    public JLabel getLblNumberAH2() {
        return lblNumberAH2;
    }

    public void setLblNumberAH2(JLabel lblNumberAH2) {
        this.lblNumberAH2 = lblNumberAH2;
    }

    public JLabel getLblNumberAL2() {
        return lblNumberAL2;
    }

    public void setLblNumberAL2(JLabel lblNumberAL2) {
        this.lblNumberAL2 = lblNumberAL2;
    }

    public JLabel getLblNumberAX2() {
        return lblNumberAX2;
    }

    public void setLblNumberAX2(JLabel lblNumberAX2) {
        this.lblNumberAX2 = lblNumberAX2;
    }

    public JLabel getLblNumberBX2() {
        return lblNumberBX2;
    }

    public void setLblNumberBX2(JLabel lblNumberBX2) {
        this.lblNumberBX2 = lblNumberBX2;
    }

    public JLabel getLblNumberCX2() {
        return lblNumberCX2;
    }

    public void setLblNumberCX2(JLabel lblNumberCX2) {
        this.lblNumberCX2 = lblNumberCX2;
    }

    public JLabel getLblNumberDX2() {
        return lblNumberDX2;
    }

    public void setLblNumberDX2(JLabel lblNumberDX2) {
        this.lblNumberDX2 = lblNumberDX2;
    }

    public JLabel getLblNumberIR2() {
        return lblNumberIR2;
    }

    public void setLblNumberIR2(JLabel lblNumberIR2) {
        this.lblNumberIR2 = lblNumberIR2;
    }

    public JLabel getLblNumberPC2() {
        return lblNumberPC2;
    }

    public void setLblNumberPC2(JLabel lblNumberPC2) {
        this.lblNumberPC2 = lblNumberPC2;
    }

    public JTable getTblMemory() {
        return tblMemory;
    }

    public void setTblMemory(JTable tblMemory) {
        this.tblMemory = tblMemory;
    }

    public JTable getTblMemory2() {
        return tblMemory2;
    }

    public void setTblMemory2(JTable tblMemory2) {
        this.tblMemory2 = tblMemory2;
    }

    public JTable getTblProcesses() {
        return tblProcesses;
    }

    public void setTblProcesses(JTable tblProcesses) {
        this.tblProcesses = tblProcesses;
    }
    
    public JLabel getLblNumberAC() {
        return lblNumberAC;
    }

    public void setLblNumberAC(JLabel lblNumberAC) {
        this.lblNumberAC = lblNumberAC;
    }

    public JLabel getLblNumberAX() {
        return lblNumberAX;
    }

    public void setLblNumberAX(JLabel lblNumberAX) {
        this.lblNumberAX = lblNumberAX;
    }

    public JLabel getLblNumberBX() {
        return lblNumberBX;
    }

    public void setLblNumberBX(JLabel lblNumberBX) {
        this.lblNumberBX = lblNumberBX;
    }

    public JLabel getLblNumberCX() {
        return lblNumberCX;
    }

    public void setLblNumberCX(JLabel lblNumberCX) {
        this.lblNumberCX = lblNumberCX;
    }

    public JLabel getLblNumberDX() {
        return lblNumberDX;
    }

    public void setLblNumberDX(JLabel lblNumberDX) {
        this.lblNumberDX = lblNumberDX;
    }

    public JLabel getLblNumberIR() {
        return lblNumberIR;
    }

    public void setLblNumberIR(JLabel lblNumberIR) {
        this.lblNumberIR = lblNumberIR;
    }

    public JLabel getLblNumberPC() {
        return lblNumberPC;
    }

    public void setLblNumberPC(JLabel lblNumberPC) {
        this.lblNumberPC = lblNumberPC;
    }

    public FileManager getFileManager() {
        return fileManager;
    }

    public void setFileManager(FileManager fileManager) {
        this.fileManager = fileManager;
    }

    public JButton getConfigurarMemoriaBtn() {
        return configurarMemoriaBtn;
    }

    public void setConfigurarMemoriaBtn(JButton configurarMemoriaBtn) {
        this.configurarMemoriaBtn = configurarMemoriaBtn;
    }

    
    
    private void nextInstructionBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextInstructionBtn1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nextInstructionBtn1ActionPerformed

    private void loadFileBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadFileBtnActionPerformed
        if (evt.getSource() == loadFileBtn && !this.isWaitingForInput()) {
            int cpuEscogido = (int)Math.round(Math.random());
            System.out.println("CPU escogido: #"+cpuEscogido);

            String filePath = fileManager.selectFile(this);
            fileManager.loadOperations();
            fileManager.loadDataRegisters();
            ArrayList<MemoryRegister> instructionSet = fileManager.loadFileInstructions(filePath,cpuEscogido);

            if (instructionSet.size() > 90){
                JOptionPane.showMessageDialog (null, "Hay m치s de 90 instrucciones por lo que no hay suficiente memoria para correrlas.", "Error: No hay suficiente memoria", JOptionPane.ERROR_MESSAGE);
                return;
            }
            else if (instructionSet != null){
                
                MiniPCController controller = null;
                ArrayList<MemoryRegister> instructions = null;
                
                if (cpuEscogido == 0){
                    controller = this.getController();
                    this.getFileManager().setInstructions(instructionSet);
                    instructions = this.getFileManager().getInstructions();
                }
                else if (cpuEscogido == 1){
                    controller = this.getController2();
                    this.getFileManager().setInstructions2(instructionSet);
                    instructions = this.getFileManager().getInstructions2();
                }

                Memory memory = controller.getCpu().getMemory();
                memory.setAllocatedSize(memory.getAllocatedSize()+instructionSet.size());
                memory.allocateMemory(instructionSet);
                int processStartIndex = memory.getAllocationStartIndex();
                
                CPU cpu = controller.getCpu();
                
                StatsSet estadisticas = new StatsSet(cpu,cpu.getCurrentTime());
                BCP newBCP = new BCP(cpu.getMemory().getBcpList().size(),filePath,"Nuevo",cpu.getCpuName(),processStartIndex+1,cpu.getMemory().getStack(),estadisticas,processStartIndex,instructionSet.size(),1);
                newBCP.setEstadoActual("Preparado");
                cpu.getMemory().getBcpList().add(newBCP);
                
                System.out.println("------------------------------------");
                System.out.println(newBCP.getAc());
                System.out.println(newBCP.getDataRegisters());
                System.out.println(newBCP.getDireccionInicio());
                System.out.println(newBCP.getEstadoActual());
                System.out.println(newBCP.getIdProcess());
                System.out.println(newBCP.getInformacionContable());
                System.out.println(newBCP.getNameProcess());
                System.out.println(newBCP.getPila());
                System.out.println(newBCP.getPrioridad());
                System.out.println(newBCP.getProgramCounter());
                System.out.println(newBCP.getTamanoProceso());
                System.out.println("------------------------------------");
                
                MemoryRegister currentInstruction = instructions.get(0);
                controller.getCpu().setInstructionRegister(currentInstruction.getAsmInstructionString());
                controller.getCpu().setProgramCounter(controller.getCpu().getMemory().getAllocationStartIndex()+1);
                controller.getCpu().setCurrentAddress(controller.getCpu().getMemory().getAllocationStartIndex());
                
                this.setCurrentInstructionDisplay(0);
                this.updateTable(this.fileManager.getInstructions(),this.fileManager.getInstructions2(),controller.getRowCount(),this.getCurrentInstructionDisplay());
                this.setArchivoAbierto(true);
                this.getConfigurarMemoriaBtn().setEnabled(false);
                this.updateMemory(this.getController().getCpu().getMemory().getSize(), this.getSecondaryMemory().getSize(), this.getSecondaryMemory().getVirtualMemorySize());
            }

        }
        else if (this.isWaitingForInput())
            JOptionPane.showMessageDialog (null, "Escriba un valor.", "Error: Debe escribir un valor.", JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_loadFileBtnActionPerformed

    private void cleanTableBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cleanTableBtnActionPerformed
        if (this.getTblMemory().getValueAt(0, 0) == "" && this.getTblMemory().getValueAt(0, 0) == " "){
            JOptionPane.showMessageDialog (null, "No queda nada por limpiar", "Error: Archivo ya est치 limpio", JOptionPane.ERROR_MESSAGE);
        }
        else{
            this.setWaitingForInput(false);
            this.cleanTable();
            this.getPantalla().setText("");
            this.getConfigurarMemoriaBtn().setEnabled(true);
        }
        
    }//GEN-LAST:event_cleanTableBtnActionPerformed

    private void exitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitBtnActionPerformed
        this.setWaitingForInput(false);
        System.exit(0);
    }//GEN-LAST:event_exitBtnActionPerformed

    private void nextInstructionBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextInstructionBtnActionPerformed
        if (!this.isWaitingForInput()){
            if (!this.isArchivoAbierto()){
                JOptionPane.showMessageDialog (null, "Por favor cargue un archivo", "Error: No hay archivos cargados", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            String estadoUltimoProceso1 = "";
            String estadoUltimoProceso2 = "";
            
            for(int i = 0 ; i < this.getController().getCpu().getMemory().getBcpList().size() ; i ++){
                estadoUltimoProceso1 = this.getController().getCpu().getMemory().getBcpList().get(i).getEstadoActual();
            }
                
            for(int i = 0 ; i < this.getController2().getCpu().getMemory().getBcpList().size() ; i ++){
                estadoUltimoProceso2 = this.getController2().getCpu().getMemory().getBcpList().get(i).getEstadoActual();
            }
            
            if (estadoUltimoProceso1.equalsIgnoreCase("Finalizado") && estadoUltimoProceso2.equalsIgnoreCase("Finalizado")){
                return;
            }
                
            
            else{
                MemoryRegister currentInstruction = null;
                if (this.getFileManager().getInstructions().size()>0){
                    currentInstruction = this.getFileManager().getInstructions().get(this.getCurrentInstructionDisplay());
                    this.getController().getCpu().setInstructionRegister(currentInstruction.getAsmInstructionString());
                    try {
                        int timeBefore = this.getController().getCpu().getCurrentTime();
                        this.getController().executeInstruction(currentInstruction.getOp(),currentInstruction.getRegister(),currentInstruction.getValue(),currentInstruction.getStringValue(),this);
                        int timeAfter = this.getController().getCpu().getCurrentTime();
                        if (this.getTimeDifference()==0)
                            this.setTimeDifference(timeAfter-timeBefore);
                        System.out.println("Difference: "+this.getTimeDifference());
                        this.getController().getCpu().setProgramCounter(this.getController().getCpu().getProgramCounter()+1);
                } catch (InterruptedException ex) {
                        Logger.getLogger(MiniPC.class.getName()).log(Level.SEVERE, null, ex);
                }
                }
                if (this.getFileManager().getInstructions2().size()>0){
                    currentInstruction = this.getFileManager().getInstructions2().get(this.getCurrentInstructionDisplay());
                    this.getController2().getCpu().setInstructionRegister(currentInstruction.getAsmInstructionString());
                    try {
                        int timeBefore = this.getController2().getCpu().getCurrentTime();
                        this.getController2().executeInstruction(currentInstruction.getOp(),currentInstruction.getRegister(),currentInstruction.getValue(),currentInstruction.getStringValue(),this);
                        int timeAfter = this.getController2().getCpu().getCurrentTime();
                        if (this.getTimeDifference()==0)
                            this.setTimeDifference(timeAfter-timeBefore);
                        System.out.println("Difference: "+this.getTimeDifference());
                        this.getController2().getCpu().setProgramCounter(this.getController2().getCpu().getProgramCounter()+1);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(MiniPC.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                
                this.updateTable(this.fileManager.getInstructions(), this.fileManager.getInstructions2(),this.getController().getRowCount(),this.getCurrentInstructionDisplay());
            
                if (this.isJumpFlag()){
                    int nextInstructionAddress = this.getController().getCpu().getProgramCounter();
                    System.out.println("Vieja: "+nextInstructionAddress);
                    nextInstructionAddress = nextInstructionAddress+this.getJumpToAddress();
                    System.out.println("Nueva: "+nextInstructionAddress);
                    this.getController().getCpu().setCurrentAddress(nextInstructionAddress);
        
                    this.getController().getCpu().setProgramCounter(nextInstructionAddress);
                    this.getLblNumberPC().setText(nextInstructionAddress+"");
                    this.getController().setRowCount(this.getController().getRowCount()+this.getJumpToAddress());
                    this.setJumpFlag(false);
                }
            }
            
            if (this.getCurrentInstructionDisplay() >= this.fileManager.getInstructions().size() && this.fileManager.getInstructions().size()>0 && this.getController().getCpu().getMemory().getBcpList().size()>0){
                int lastProcessIndex = 0;
                for(int i = 0 ; i < this.getController().getCpu().getMemory().getBcpList().size() ; i ++){
                    lastProcessIndex = i;
                }
                
                this.getController().getCpu().getMemory().getBcpList().get(lastProcessIndex).setEstadoActual("Finalizado");
                this.getTblProcesses().setValueAt("Finalizado", lastProcessIndex, 2);
                this.getController().getCpu().getMemory().getBcpList().get(lastProcessIndex).getInformacionContable().setEndTime(this.getController().getCpu().getCurrentTime());
                int startTime = this.getController().getCpu().getMemory().getBcpList().get(lastProcessIndex).getInformacionContable().getStartTime();
                int endTime = this.getController().getCpu().getMemory().getBcpList().get(lastProcessIndex).getInformacionContable().getEndTime();
                this.getController().getCpu().getMemory().getBcpList().get(lastProcessIndex).getInformacionContable().setDurationTime(endTime-startTime);
                this.setCurrentInstructionDisplay(0);
                this.getFileManager().setInstructions(new ArrayList<MemoryRegister>());
                System.out.println("Start1: "+startTime);
                System.out.println("End1: "+endTime);
                System.out.println("Duration1: "+this.getController().getCpu().getMemory().getBcpList().get(lastProcessIndex).getInformacionContable().getDurationTime());
            }
            if (this.getCurrentInstructionDisplay() >= this.fileManager.getInstructions2().size() && this.fileManager.getInstructions2().size()>0  && this.getController2().getCpu().getMemory().getBcpList().size()>0){
                int lastProcessIndex = 0;
                for(int i = 0 ; i < this.getController2().getCpu().getMemory().getBcpList().size() ; i ++){
                    lastProcessIndex = i;
                }
                
                this.getController2().getCpu().getMemory().getBcpList().get(lastProcessIndex).setEstadoActual("Finalizado");
                this.getTblProcesses().setValueAt("Finalizado", lastProcessIndex, 2);
                this.getController2().getCpu().getMemory().getBcpList().get(lastProcessIndex).getInformacionContable().setEndTime(this.getController2().getCpu().getCurrentTime());
                int startTime = this.getController2().getCpu().getMemory().getBcpList().get(lastProcessIndex).getInformacionContable().getStartTime();
                int endTime = this.getController2().getCpu().getMemory().getBcpList().get(lastProcessIndex).getInformacionContable().getEndTime();
                this.getController2().getCpu().getMemory().getBcpList().get(lastProcessIndex).getInformacionContable().setDurationTime(endTime-startTime);
                this.setCurrentInstructionDisplay(0);
                this.getFileManager().setInstructions2(new ArrayList<MemoryRegister>());
                System.out.println("Start2: "+startTime);
                System.out.println("End2: "+endTime);
                System.out.println("Duration2: "+this.getController2().getCpu().getMemory().getBcpList().get(lastProcessIndex).getInformacionContable().getDurationTime());
            }
        }
        else
            JOptionPane.showMessageDialog (null, "Escriba un valor.", "Error: Debe escribir un valor.", JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_nextInstructionBtnActionPerformed

    private void tecladoTxtFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tecladoTxtFieldActionPerformed
        System.out.println(this.getTecladoTxtField().getText());
        String inputTeclado = "";
        int valorTeclado = -1;
        inputTeclado = this.getTecladoTxtField().getText();
        
        if (inputTeclado.matches("-?\\d+(\\.\\d+)?")){
            valorTeclado = Integer.parseInt(inputTeclado);
            
            if (valorTeclado < 0 || valorTeclado > 255){
                JOptionPane.showMessageDialog (null, "Escriba un valor entre 0-255", "Error: Valor fuera del rango 0-255.", JOptionPane.ERROR_MESSAGE);
            }
            else{
                this.getController().getCpu().getDataRegisters().get(4-1).setValue(valorTeclado);
                this.getLblNumberDX().setText(valorTeclado+"");
                this.getTecladoTxtField().setEditable(false);
                this.setWaitingForInput(false);
                this.getTecladoTxtField().setText("");
            }
            
        }
        else{
            JOptionPane.showMessageDialog (null, "Escriba un valor entero.", "Error: Debe escribir un valor entero.", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_tecladoTxtFieldActionPerformed

    private void automaticBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_automaticBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_automaticBtnActionPerformed

    private void estadisticasBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_estadisticasBtnActionPerformed
        MostrarEstadisticas statsWindow = new MostrarEstadisticas();
        statsWindow.setVisible(true);
        statsWindow.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        
        for(int i = 0 ; i < this.getController().getCpu().getMemory().getBcpList().size() ; i ++){
            
            String path = this.getController().getCpu().getMemory().getBcpList().get(i).getNameProcess();
            File file = new File(path);
            String processName = file.getName();
            
            statsWindow.getTblStats().setValueAt(this.getController().getCpu().getMemory().getBcpList().get(i).getIdProcess(), i, 0);
            statsWindow.getTblStats().setValueAt(processName, i, 1);
            statsWindow.getTblStats().setValueAt(this.getController().getCpu().getMemory().getBcpList().get(i).getInformacionContable().getStartTime(), i, 2);
            statsWindow.getTblStats().setValueAt(this.getController().getCpu().getMemory().getBcpList().get(i).getInformacionContable().getEndTime(), i, 3);
            statsWindow.getTblStats().setValueAt(this.getController().getCpu().getMemory().getBcpList().get(i).getInformacionContable().getDurationTime(), i, 4);
        }
        
    }//GEN-LAST:event_estadisticasBtnActionPerformed

    private void configurarMemoriaBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_configurarMemoriaBtnActionPerformed
        ConfigMemoria configMemoria = new ConfigMemoria();
        configMemoria.setMiniPC(this);
        configMemoria.setVisible(true);
        configMemoria.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
             
    }//GEN-LAST:event_configurarMemoriaBtnActionPerformed

    private void jPanel3FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jPanel3FocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanel3FocusLost

    
    /**private void setMemorias(){
        String Snumero1 = configMemoria.getTxt_MemPrincipal();
        String Snumero2 = configMemoria.getTxt_Disco();
        String Snumero3 = configMemoria.getTxt_MemVirtual();
        
        int numero1 = Integer.parseInt(Snumero1);
        int numero2 = Integer.parseInt(Snumero2);
        int numero3 = Integer.parseInt(Snumero3);
        
        this.getController().getCpu().getMemory().setSize(numero1); 
        System.out.println(numero1);
        System.out.println("MemoriaPrincipal: "+this.getController().getCpu().getMemory().getSize());
        this.getController().getCpu().getSecondaryMemory().setSize(numero2); 
        this.getController().getCpu().getSecondaryMemory().setVirtualMemorySize(numero3);
        
        System.out.println("MemoriaPrincipal: "+this.getController().getCpu().getMemory().getSize());
        System.out.println("MemoriaDisco: "+this.getController().getCpu().getSecondaryMemory().getSize());
        System.out.println("MemoriaVirtual: "+this.getController().getCpu().getSecondaryMemory().getVirtualMemorySize());  
    } **/
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MiniPC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MiniPC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MiniPC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MiniPC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MiniPC().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Lbl_memoria;
    private javax.swing.JLabel Lbl_memoria2;
    private javax.swing.JLabel Lbl_memoria4;
    private javax.swing.JLabel Lbl_memoria5;
    private javax.swing.JLabel Lbl_memoria6;
    private javax.swing.JLabel Lbl_memoria7;
    private javax.swing.JLabel Lbl_registros;
    private javax.swing.JLabel Lbl_registros1;
    private javax.swing.JScrollPane Pnl_Memoria;
    private javax.swing.JScrollPane Pnl_Memoria1;
    private javax.swing.JScrollPane Pnl_Memoria2;
    private javax.swing.JScrollPane Pnl_Memoria4;
    private javax.swing.JPanel Pnl_Menu;
    private javax.swing.JPanel Pnl_Registros;
    private javax.swing.JPanel Pnl_Registros1;
    private javax.swing.JButton automaticBtn;
    private javax.swing.JButton cleanTableBtn;
    private javax.swing.JButton configurarMemoriaBtn;
    private javax.swing.JButton estadisticasBtn;
    private javax.swing.JButton exitBtn;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private java.awt.Label label1;
    private javax.swing.JLabel lblAC;
    private javax.swing.JLabel lblAC1;
    private javax.swing.JLabel lblAH;
    private javax.swing.JLabel lblAH1;
    private javax.swing.JLabel lblAL;
    private javax.swing.JLabel lblAL1;
    private javax.swing.JLabel lblAX;
    private javax.swing.JLabel lblAX1;
    private javax.swing.JLabel lblBX;
    private javax.swing.JLabel lblBX1;
    private javax.swing.JLabel lblCX;
    private javax.swing.JLabel lblCX1;
    private javax.swing.JLabel lblDX;
    private javax.swing.JLabel lblDX1;
    private javax.swing.JLabel lblIR;
    private javax.swing.JLabel lblIR1;
    private javax.swing.JLabel lblListaProcesos;
    private javax.swing.JLabel lblNumberAC;
    private javax.swing.JLabel lblNumberAC2;
    private javax.swing.JLabel lblNumberAH;
    private javax.swing.JLabel lblNumberAH2;
    private javax.swing.JLabel lblNumberAL;
    private javax.swing.JLabel lblNumberAL2;
    private javax.swing.JLabel lblNumberAX;
    private javax.swing.JLabel lblNumberAX2;
    private javax.swing.JLabel lblNumberBX;
    private javax.swing.JLabel lblNumberBX2;
    private javax.swing.JLabel lblNumberCX;
    private javax.swing.JLabel lblNumberCX2;
    private javax.swing.JLabel lblNumberDX;
    private javax.swing.JLabel lblNumberDX2;
    private javax.swing.JLabel lblNumberIR;
    private javax.swing.JLabel lblNumberIR2;
    private javax.swing.JLabel lblNumberPC;
    private javax.swing.JLabel lblNumberPC2;
    private javax.swing.JLabel lblPC;
    private javax.swing.JLabel lblPC1;
    private javax.swing.JLabel lblPantalla;
    private javax.swing.JLabel lblTeclado;
    private javax.swing.JButton loadFileBtn;
    private javax.swing.JButton nextInstructionBtn;
    private javax.swing.JButton nextInstructionBtn1;
    private javax.swing.JTextPane pantalla;
    private javax.swing.JTable tblMainMemory;
    private javax.swing.JTable tblMemory;
    private javax.swing.JTable tblMemory2;
    private javax.swing.JTable tblMemoryList;
    private javax.swing.JTable tblProcesses;
    private javax.swing.JTable tblSecondaryMemory;
    private javax.swing.JTable tblVirtualMemory;
    private javax.swing.JTextField tecladoTxtField;
    // End of variables declaration//GEN-END:variables
}
